package model;
// Generated Mar 17, 2020 11:30:23 AM by Hibernate Tools 4.3.1

import java.util.ArrayList;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import main.SessionConfig;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * Interventions generated by hbm2java
 */
@Entity
@Table(name = "interventions",
        catalog = "dentassist"
)
public class Interventions implements java.io.Serializable {

    private static Session session;

    private Integer idinterventions;
    private Diagnosis diagnosis;
    private Patients patients;
    private int tooth;
    private String description;
    private String dateOfIntervention;
    private double price;
    private String charged;

    private String firstName;
    private String lastName;
    private String residence;
    private String phoneNumber;

    public Interventions() {
    }

    public Interventions(Diagnosis diagnosis, Patients patients, int tooth, String description, String dateOfIntervention, double price, String charged) {
        this.diagnosis = diagnosis;
        this.patients = patients;
        this.tooth = tooth;
        this.description = description;
        this.dateOfIntervention = dateOfIntervention;
        this.price = price;
        this.charged = charged;
    }

    public Interventions(Integer idinterventions, String firstName, String lastName, String residence, String phoneNumber, Diagnosis diagnosis, int tooth, double price, String charged, String description, String dateOfIntervention) {
        this.idinterventions = idinterventions;
        this.tooth = tooth;
        this.description = description;
        this.dateOfIntervention = dateOfIntervention;
        this.price = price;
        this.charged = charged;
        this.firstName = firstName;
        this.lastName = lastName;
        this.residence = residence;
        this.phoneNumber = phoneNumber;
        this.diagnosis = diagnosis;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "idinterventions", unique = true, nullable = false)
    public Integer getIdinterventions() {
        return this.idinterventions;
    }

    public void setIdinterventions(Integer idinterventions) {
        this.idinterventions = idinterventions;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "iddiagnosis", nullable = false)
    public Diagnosis getDiagnosis() {
        return this.diagnosis;
    }

    public void setDiagnosis(Diagnosis diagnosis) {
        this.diagnosis = diagnosis;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "idpatients", nullable = false)
    public Patients getPatients() {
        return this.patients;
    }

    public void setPatients(Patients patients) {
        this.patients = patients;
    }

    @Column(name = "tooth", nullable = false)
    public int getTooth() {
        return this.tooth;
    }

    public void setTooth(int tooth) {
        this.tooth = tooth;
    }

    @Column(name = "description", nullable = false, length = 65535)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "date_of_intervention", nullable = false, length = 10)
    public String getDateOfIntervention() {
        return this.dateOfIntervention;
    }

    public void setDateOfIntervention(String dateOfIntervention) {
        this.dateOfIntervention = dateOfIntervention;
    }

    @Column(name = "price", nullable = false, precision = 22, scale = 0)
    public double getPrice() {
        return this.price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    @Column(name = "charged", nullable = false, length = 2)
    public String getCharged() {
        return this.charged;
    }

    public void setCharged(String charged) {
        this.charged = charged;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getResidence() {
        return residence;
    }

    public void setResidence(String residence) {
        this.residence = residence;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    //Methods
    public static void saveIntervention(Interventions i) {
        session = SessionConfig.createSession();
        Transaction tr = null;

        try {
            tr = session.beginTransaction();
            session.persist(i);
            tr.commit();
        } catch (HibernateException e) {
            if (tr != null) {
                tr.rollback();
            }
        } finally {
            if (session.isOpen()) {
                session.close();
            }
        }
    }

    public static Interventions getIntervention(int id) {
        session = SessionConfig.createSession();
        Interventions i;

        try {
            return i = (Interventions) session.load(Interventions.class, id);
        } catch (Exception e) {
            e.getMessage();
        } finally {
            if (session.isOpen()) {
                session.close();
            }
        }
        return null;
    }

    public static ObservableList<Interventions> loadInterventions() {
        session = SessionConfig.createSession();
        ObservableList<Interventions> interventionsList = FXCollections.observableArrayList();

        try {
            Query q = session.createQuery("FROM Interventions AS i");
            ArrayList<Interventions> list = (ArrayList<Interventions>) q.list();

            for (int i = 0; i < list.size(); i++) {
                interventionsList.add(new Interventions(list.get(i).getIdinterventions(), list.get(i).getPatients().getFirstName(), list.get(i).getPatients().getLastName(), 
                        list.get(i).getPatients().getResidence(),list.get(i).getPatients().getPhoneNumber(), list.get(i).getDiagnosis(), list.get(i).getTooth(), list.get(i).getPrice(),
                        list.get(i).getCharged(), list.get(i).getDescription(),list.get(i).getDateOfIntervention()));
            }

            return interventionsList;

        } catch (HibernateException e) {
            e.getMessage();
        }   
//        finally{
//            if (session.isOpen()) {
//                session.close();
//            }
//        }

        return null;
    }
    
    public static void updateIntervention(int id, String newCharged, String newDescription){
        session = SessionConfig.createSession();
        Transaction tr = null;
        
        try{
            Interventions oldIntervention = (Interventions) session.load(Interventions.class, id);
            tr = session.beginTransaction();
            oldIntervention.setCharged(newCharged);
            oldIntervention.setDescription(newDescription);
            session.update(oldIntervention);
            tr.commit();
        }
        catch(HibernateException e){
            if (tr!=null) {
                tr.rollback();
            }
        }
        finally{
            if (session.isOpen()) {
                session.close();
            }
        }
    }
    
    public static ObservableList<Interventions> showDebts(){
        session = SessionConfig.createSession();
        ObservableList<Interventions> debtsList = FXCollections.observableArrayList();

        try {
            Query q = session.createQuery("FROM Interventions AS i where charged = 'NE'");
            ArrayList<Interventions> list = (ArrayList<Interventions>) q.list();

            for (int i = 0; i < list.size(); i++) {
                debtsList.add(new Interventions(list.get(i).getIdinterventions(), list.get(i).getPatients().getFirstName(), list.get(i).getPatients().getLastName(), 
                        list.get(i).getPatients().getResidence(),list.get(i).getPatients().getPhoneNumber(), list.get(i).getDiagnosis(), list.get(i).getTooth(), list.get(i).getPrice(),
                        list.get(i).getCharged(), list.get(i).getDescription(),list.get(i).getDateOfIntervention()));
            }

            return debtsList;

        } catch (HibernateException e) {
            e.getMessage();
        }
//        finally{
//            if (session.isOpen()) {
//                session.close();
//            }
//        }
        return null;
    }
}
