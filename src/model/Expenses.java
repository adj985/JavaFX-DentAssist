package model;
// Generated Mar 17, 2020 11:30:23 AM by Hibernate Tools 4.3.1

import java.util.ArrayList;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.Table;
import main.SessionConfig;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * Expenses generated by hbm2java
 */
@Entity
@Table(name = "expenses",
         catalog = "dentassist"
)
public class Expenses implements java.io.Serializable {

    private static Session session;

    private Integer idexpenses;
    private String expensePurpose;
    private double amountSpent;
    private String expenseDate;

    public Expenses() {
    }

    public Expenses(Integer idexpenses, String expensePurpose, double amountSpent, String expenseDate) {
        this.idexpenses = idexpenses;
        this.expensePurpose = expensePurpose;
        this.amountSpent = amountSpent;
        this.expenseDate = expenseDate;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "idexpenses", unique = true, nullable = false)
    public Integer getIdexpenses() {
        return this.idexpenses;
    }

    public void setIdexpenses(Integer idexpenses) {
        this.idexpenses = idexpenses;
    }

    @Column(name = "expense_purpose", nullable = false, length = 128)
    public String getExpensePurpose() {
        return this.expensePurpose;
    }

    public void setExpensePurpose(String expensePurpose) {
        this.expensePurpose = expensePurpose;
    }

    @Column(name = "amount_spent", nullable = false, precision = 22, scale = 0)
    public double getAmountSpent() {
        return this.amountSpent;
    }

    public void setAmountSpent(double amountSpent) {
        this.amountSpent = amountSpent;
    }

    @Column(name = "expense_date", nullable = false, length = 10)
    public String getExpenseDate() {
        return this.expenseDate;
    }

    public void setExpenseDate(String expenseDate) {
        this.expenseDate = expenseDate;
    }

    //Methods
    public static void saveExpense(Expenses e) {

        session = SessionConfig.createSession();
        Transaction tr = null;
        try {
            tr = session.beginTransaction();
            session.persist(e);
            tr.commit();
        } catch (HibernateException ex) {
            if (tr != null) {
                tr.rollback();
            }
        } finally {
            if (session.isOpen()) {
                session.close();
            }
        }

    }

    public static ObservableList<Expenses> loadExpenses() {
        session = SessionConfig.createSession();
        Query q = session.createQuery("FROM Expenses AS e ORDER BY e.idexpenses DESC");
        ArrayList<Expenses> list = (ArrayList) q.list();

        ObservableList<Expenses> expensesList = FXCollections.observableArrayList();

        for (int i = 0; i < list.size(); i++) {
            expensesList.add(new Expenses(list.get(i).getIdexpenses() ,list.get(i).getExpensePurpose(), list.get(i).getAmountSpent(), list.get(i).getExpenseDate()));
        }

        if (session.isOpen()) {
            session.close();
        }

        return expensesList;
    }

    public static void updateExpense(int id, double newAmount, String newDate, String newPurpose) {
        session = SessionConfig.createSession();
        Transaction tr = null;
        try {
            tr = session.beginTransaction();
            Expenses newExpense = (Expenses) session.load(Expenses.class, id);

            newExpense.setAmountSpent(newAmount);
            newExpense.setExpenseDate(newDate);
            newExpense.setExpensePurpose(newPurpose);
            session.update(newExpense);
            tr.commit();
        } catch (HibernateException ex) {
            if (tr != null) {
                tr.rollback();
            }
        } finally {
            if (session.isOpen()) {
                session.close();
            }
        }
    }

}
