package model;

import java.util.ArrayList;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.Table;
import main.SessionConfig;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "users",
        catalog = "dentassist")
public class Users implements java.io.Serializable{

    private static Session session;
    
    private Integer iduser;
    private String userName;
    private String password;

    public Users() {
    }

    public Users(Integer iduser, String userName, String password) {
        this.iduser = iduser;
        this.userName = userName;
        this.password = password;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    
    @Column(name = "iduser", unique = true, nullable = false)
    public Integer getIduser() {
        return iduser;
    }

    public void setIduser(Integer iduser) {
        this.iduser = iduser;
    }

    @Column(name = "user_name", length = 45)
    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    @Column(name = "password", length = 45)
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
    
    //Methods
    
    public static void createUser(Users u){
        session = SessionConfig.createSession();
        Transaction tr = null;

        try {
            tr = session.beginTransaction();
            session.persist(u);
            tr.commit();
        } catch (HibernateException e) {
            if (tr != null) {
                tr.rollback();
            }
        } finally {
            session.close();
        }
    }
    
    public static ObservableList<Users> loadUsers(){
        session = SessionConfig.createSession();
        ObservableList<Users> usersList = FXCollections.observableArrayList();

        try {
            Query q = session.createQuery("SELECT u FROM Users as u");
            ArrayList<Users> list = (ArrayList<Users>) q.list();
            
            for (int i = 0; i < list.size(); i++) {
                usersList.add(list.get(i));
            }
            return usersList;

        } catch (HibernateException e) { 
           e.getMessage();
        } finally {
                session.close();
        }
        return null;
    }
    
    public static void updatePassword(int userId, String newPassword){
        session = SessionConfig.createSession();
        Transaction tr = null;
        
        try {
            tr = session.beginTransaction();
            Users u = (Users) session.load(Users.class, userId);
            u.setPassword(newPassword);
            session.update(u);
            tr.commit();
        } catch (HibernateException e) {
            if (tr != null) {
                tr.rollback();
            }
        } finally {
            session.close();
        }
    }
    
    
}
