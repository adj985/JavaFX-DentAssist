package model;
// Generated Mar 17, 2020 11:30:23 AM by Hibernate Tools 4.3.1

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import main.SessionConfig;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 * Scheduling generated by hbm2java
 */
@Entity
@Table(name = "scheduling",
        catalog = "dentassist"
)
public class Scheduling implements java.io.Serializable {

    private static Session session;
    private static ArrayList<Scheduling> list;
    private static ObservableList<Scheduling> scheduleList = FXCollections.observableArrayList();

    private Integer idscheduling;
    private Patients patients;
    private String scheduledDate;
    private String scheduledTime;
    private String firstName;
    private String lastName;
    private String phoneNumber;
    private String residence;
    private LocalDate localScheduledDate;
    private LocalTime localScheduledTime;

    public Scheduling() {
    }

    public Scheduling(LocalTime localScheduledTime, String firstName, String lastName, String residence, String phoneNumber) {
        this.residence = residence;
        this.localScheduledTime = localScheduledTime;
        this.firstName = firstName;
        this.lastName = lastName;
        this.phoneNumber = phoneNumber;
    }

    public Scheduling(Integer idscheduling, String firstName, String lastName, String phoneNumber, String residence, LocalDate localScheduledDate, LocalTime localScheduledTime) {
        this.idscheduling = idscheduling;
        this.firstName = firstName;
        this.lastName = lastName;
        this.phoneNumber = phoneNumber;
        this.residence = residence;
        this.localScheduledDate = localScheduledDate;
        this.localScheduledTime = localScheduledTime;
    }

    public Scheduling(String scheduledDate, String scheduledTime, Patients patients) {

        this.patients = patients;
        this.scheduledDate = scheduledDate;
        this.scheduledTime = scheduledTime;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "idscheduling", unique = true, nullable = false)
    public Integer getIdscheduling() {
        return this.idscheduling;
    }

    public void setIdscheduling(Integer idscheduling) {
        this.idscheduling = idscheduling;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "idpatients", nullable = false)
    public Patients getPatients() {
        return this.patients;
    }

    public void setPatients(Patients patients) {
        this.patients = patients;
    }

    @Column(name = "scheduled_date", nullable = false, length = 10)
    public String getScheduledDate() {
        return this.scheduledDate;
    }

    public void setScheduledDate(String scheduledDate) {
        this.scheduledDate = scheduledDate;
    }

    @Column(name = "scheduled_time", nullable = false, length = 5)
    public String getScheduledTime() {
        return this.scheduledTime;
    }

    public void setScheduledTime(String scheduledTime) {
        this.scheduledTime = scheduledTime;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getResidence() {
        return residence;
    }

    public void setResidence(String residence) {
        this.residence = residence;
    }

    public LocalDate getLocalScheduledDate() {
        return localScheduledDate;
    }

    public void setLocalScheduledDate(LocalDate localScheduledDate) {
        this.localScheduledDate = localScheduledDate;
    }

    public LocalTime getLocalScheduledTime() {
        return localScheduledTime;
    }

    public void setLocalScheduledTime(LocalTime localScheduledTime) {
        this.localScheduledTime = localScheduledTime;
    }

    @Override
    public String toString() {
        return "Scheduling{" + "idscheduling=" + idscheduling + ", patients=" + patients + ", scheduledDate=" + scheduledDate + ", scheduledTime=" + scheduledTime + '}';
    }
    

    //Methods
    
    public static void schedule(Scheduling s) {
        session = SessionConfig.createSession();
        Transaction tr = null;
        try {
            tr = session.beginTransaction();
            session.persist(s);
            tr.commit();
        } catch (HibernateException e) {
            if (tr != null) {
                tr.rollback();
            }
        } finally {
            if (session.isOpen()) {
                session.close();
            }
        }
    }

    public static void removeScheduling(Scheduling s) {
        session = SessionConfig.createSession();
        Transaction tr = null;
        try {
            tr = session.beginTransaction();
            session.delete(s);
            tr.commit();
        } catch (HibernateException e) {
            if (tr != null) {
                tr.rollback();
            }
        } finally {
            if (session.isOpen()) {
                session.close();
            }
        }

    }

    public static ObservableList<Scheduling> loadSchedule() {
        scheduleList.clear();
        list.clear();
        session = SessionConfig.createSession();
        Query q = session.createQuery("FROM Scheduling AS s");
        list = (ArrayList<Scheduling>) q.list();

        for (int i = 0; i < list.size(); i++) {
            scheduleList.add((Scheduling) list.get(i));
        }

        if (session.isOpen()) {
            session.close();
        }
        return scheduleList;
    }

    public static ObservableList<Scheduling> loadScheduleOverview() {
        scheduleList.clear();
        list.clear();

        LocalDate date;
        LocalTime time;
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");

        session = SessionConfig.createSession();
        Query q = session.createQuery("FROM Scheduling AS s");
        list = (ArrayList<Scheduling>) q.list();

        for (int i = 0; i < list.size(); i++) {
            date = LocalDate.parse(list.get(i).getScheduledDate(), formatter);
            time = LocalTime.of(Integer.parseInt((list.get(i).getScheduledTime().split(":"))[0]), Integer.parseInt((list.get(i).getScheduledTime().split(":"))[1]));
            if (date.isBefore(LocalDate.now())) {
                System.out.println(list.get(i));
                Scheduling.removeScheduling(list.get(i));
            } else {

                scheduleList.add(new Scheduling(list.get(i).getIdscheduling(), list.get(i).getPatients().getFirstName(), list.get(i).getPatients().getLastName(),
                        list.get(i).getPatients().getPhoneNumber(), list.get(i).getPatients().getResidence(), date, time));
            }
        }

        if (session.isOpen()) {
            session.close();
        }

        return scheduleList;

    }

    public static ObservableList<Scheduling> loadDailySchedule() {

        scheduleList.clear();

        ObservableList<Scheduling> dailyList = FXCollections.observableArrayList();

        session = SessionConfig.createSession();

        LocalDate date = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
        LocalTime time;

        Query q = session.createQuery("FROM Scheduling AS s WHERE scheduledDate = '" + date.format(formatter) + "'");
        list = (ArrayList<Scheduling>) q.list();

        for (int i = 0; i < list.size(); i++) {
            scheduleList.add((Scheduling) list.get(i));
        }
        for (int i = 0; i < scheduleList.size(); i++) {
            time = LocalTime.of(Integer.parseInt((scheduleList.get(i).getScheduledTime().split(":"))[0]), Integer.parseInt((scheduleList.get(i).getScheduledTime().split(":"))[1]));
            dailyList.add(new Scheduling(time, scheduleList.get(i).getPatients().getFirstName(),
                    scheduleList.get(i).getPatients().getLastName(), scheduleList.get(i).getPatients().getResidence(),
                    scheduleList.get(i).getPatients().getPhoneNumber()));
        }

        if (session.isOpen()) {
            session.close();
        }

        return dailyList;
    }

    public static Scheduling findScheduling(int id) {
        session = SessionConfig.createSession();
        Scheduling s = (Scheduling) session.load(Scheduling.class, id);
        session.close();
        return s;
    }

    public static void updateSchedule(int id, String newDate, String newTime) {
        session = SessionConfig.createSession();

        Transaction tr = null;
        try {
            tr = session.beginTransaction();
            Scheduling s = (Scheduling) session.load(Scheduling.class, id);
            s.setScheduledDate(newDate);
            s.setScheduledTime(newTime);
            tr.commit();
        } catch (HibernateException e) {
            if (tr != null) {
                tr.rollback();
            }
        } finally {
            if (session.isOpen()) {
                session.close();
            }
        }
    }
    
    public static void resetSchedule(){
        session = SessionConfig.createSession();
        Query q = session.createSQLQuery("TRUNCATE TABLE scheduling");
        session.close();
    }

}
